{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Job Search AI Assistant","text":"<p>A comprehensive job search aggregator built with Python 3.13 and FastAPI that integrates multiple job platforms to streamline the job hunting process.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>Platform Integration: Connect with multiple job platforms (LinkedIn, Djinni, DOU, Work.ua, and more)</li> <li>Unified Search: Access all job listings through a single, consistent interface</li> <li>Smart Filtering: Advanced filtering options to find the most relevant opportunities</li> <li>Notifications: Customizable email and Telegram notifications for new job listings</li> <li>Analytics Dashboard: Track job market trends and your application progress</li> </ul>"},{"location":"#tech-stack","title":"\ud83d\udd27 Tech Stack","text":"<ul> <li>Core Dependencies</li> <li>Python 3.9-3.13: Full compatibility with multiple Python versions</li> <li>FastAPI: High-performance web framework for building APIs</li> <li>Supabase: Database and authentication backend</li> <li>Streamlit: Interactive web interface</li> <li>Development Tools</li> <li>Ruff: Fast Python linter and formatter</li> <li>Pre-commit: Automated code quality checks</li> <li>PyTest: Comprehensive test framework with coverage reporting</li> <li>MyPy: Static type checking</li> <li>Tox: Testing across multiple Python environments</li> <li>uv: Fast Python package installer and resolver</li> </ul>"},{"location":"#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Python (3.9-3.13)</li> <li>uv (0.7.6 or newer)</li> </ul>"},{"location":"#installation","title":"\ud83d\ude80 Installation","text":"<ol> <li> <p>Clone the repository</p> <pre><code>git clone https://github.com/RYZHAIEV-SERHII/job-search-ai-assistant.git\ncd job-search-ai-assistant\n</code></pre> </li> <li> <p>Install dependencies using uv</p> <pre><code>uv sync\n</code></pre> </li> <li> <p>Install pre-commit hooks</p> <pre><code>uv run pre-commit install\nuv run pre-commit install --hook-type commit-msg\n</code></pre> </li> <li> <p>Run the application</p> <pre><code>python main.py\n</code></pre> </li> </ol>"},{"location":"#example-usage","title":"\ud83d\udcca Example Usage","text":"<p>Note</p> <p>The project is in early development. Usage examples will be added as features are implemented.</p>"},{"location":"#running-tests","title":"\ud83e\uddea Running Tests","text":"<p>Run tests using Make:</p> <pre><code>make test\n</code></pre> <p>Or directly with pytest:</p> <pre><code>pytest\n</code></pre> <p>To run tests across multiple Python versions:</p> <pre><code>tox\n</code></pre>"},{"location":"#code-quality","title":"\ud83d\udd0d Code Quality","text":"<p>Run all code quality checks:</p> <pre><code>make check\n</code></pre> <p>This will:</p> <ul> <li>Check lock file consistency</li> <li>Run pre-commit hooks</li> <li>Run static type checking with mypy</li> <li>Check for obsolete dependencies with deptry</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<p>Build and serve documentation:</p> <pre><code>make docs\n</code></pre> <p>Test if documentation builds without errors:</p> <pre><code>make docs-test\n</code></pre>"},{"location":"#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<pre><code>job-search-ai-assistant/\n\u2502\n\u251c\u2500\u2500 .github/               # GitHub configuration files\n\u251c\u2500\u2500 .hooks/                # Custom pre-commit hooks\n\u251c\u2500\u2500 docs/                  # Documentation files\n\u251c\u2500\u2500 src/                   # Source code\n\u251c\u2500\u2500 tests/                 # Test files\n\u251c\u2500\u2500 .env                   # Environment variables\n\u251c\u2500\u2500 .gitignore             # Files to ignore in git\n\u251c\u2500\u2500 .pre-commit-config.yaml # Pre-commit configuration\n\u251c\u2500\u2500 CONTRIBUTING.md        # Contributing guidelines\n\u251c\u2500\u2500 Dockerfile             # Docker configuration\n\u251c\u2500\u2500 LICENSE                # License file\n\u251c\u2500\u2500 main.py                # Main entry point\n\u251c\u2500\u2500 Makefile               # Makefile for common tasks\n\u251c\u2500\u2500 mkdocs.yml             # MkDocs configuration\n\u251c\u2500\u2500 pyproject.toml         # Project configuration\n\u251c\u2500\u2500 README.md              # Project documentation\n\u251c\u2500\u2500 tox.ini                # Tox configuration\n\u2514\u2500\u2500 uv.lock                # uv lock file\n</code></pre>"},{"location":"#roadmap","title":"\ud83d\udee3\ufe0f Roadmap","text":"<ul> <li> Initial project setup</li> <li> CI/CD pipeline with GitHub Actions</li> <li> Job platform API integrations</li> <li> Search functionality implementation</li> <li> Notification system</li> <li> Web interface with Streamlit</li> <li> Analytics dashboard</li> </ul> <p>For detailed version history and latest changes, see our CHANGELOG \ud83d\udcc8</p>"},{"location":"#contributing","title":"\ud83e\uddf0\ufe0f Contributing","text":"<p>We welcome contributions! Check out our Contributing Guidelines.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>"},{"location":"#contact","title":"\ud83d\udcde Contact","text":"<p>If you have any questions or suggestions, feel free to reach out to me at Email or Telegram</p> <p>Created with \u2764\ufe0f by RYZHAIEV-SERHII</p>"},{"location":"modules/","title":"API Reference","text":"<p>This section provides detailed documentation for all modules in the Job Search AI Assistant.</p>"},{"location":"modules/#core-module","title":"Core Module","text":""},{"location":"modules/#assistant","title":"Assistant","text":"<p>Main entry point for the job-search-ai-assistant project.</p>"},{"location":"modules/#job_search_ai_assistant.assistant.assistant","title":"<code>assistant()</code>","text":"<p>Create and return the FastAPI application.</p> <p>Returns:</p> Name Type Description <code>FastAPI</code> <code>FastAPI</code> <p>Configured FastAPI application instance.</p> Source code in <code>src/job_search_ai_assistant/assistant.py</code> <pre><code>def assistant() -&gt; FastAPI:\n    \"\"\"Create and return the FastAPI application.\n\n    Returns:\n        FastAPI: Configured FastAPI application instance.\n    \"\"\"\n    return create_app()\n</code></pre>"},{"location":"modules/#api-package","title":"API Package","text":""},{"location":"modules/#application-factory","title":"Application Factory","text":"<p>API package for job-search-ai-assistant.</p>"},{"location":"modules/#job_search_ai_assistant.api.create_app","title":"<code>create_app()</code>","text":"<p>Create and configure the FastAPI application.</p> <p>Returns:</p> Name Type Description <code>FastAPI</code> <code>FastAPI</code> <p>Configured FastAPI application instance.</p> Source code in <code>src/job_search_ai_assistant/api/__init__.py</code> <pre><code>def create_app() -&gt; FastAPI:\n    \"\"\"Create and configure the FastAPI application.\n\n    Returns:\n        FastAPI: Configured FastAPI application instance.\n    \"\"\"\n    # Setup logging\n    setup_logging()\n\n    app = FastAPI(\n        title=\"Job Search AI Assistant\",\n        description=\"AI-powered job search aggregator across multiple platforms\",\n        version=\"0.1.0\",\n    )\n\n    # Add CORS middleware\n    app.add_middleware(\n        CORSMiddleware,\n        allow_origins=[\"*\"],  # TODO: Configure this for production\n        allow_credentials=False,  # Cannot use credentials with wildcard origins\n        allow_methods=[\"*\"],\n        allow_headers=[\"*\"],\n    )\n\n    # Add Gzip compression\n    app.add_middleware(GZipMiddleware, minimum_size=1000)\n\n    # Error handling middleware\n    @app.middleware(\"http\")\n    async def error_handling_middleware(\n        request: Request, call_next: Callable[[Request], Awaitable[Response]]\n    ) -&gt; Response:\n        \"\"\"Global error handling middleware.\n\n        Args:\n            request: The incoming request\n            call_next: The next middleware/route handler\n\n        Returns:\n            Response: The API response\n        \"\"\"\n        try:\n            return await call_next(request)\n        except Exception as e:\n            logger.error(f\"Unhandled error: {e}\", exc_info=True)\n            return JSONResponse(status_code=500, content={\"detail\": \"Internal server error\"})\n\n    # Create API router\n    api_router = APIRouter(prefix=\"/api/v1\")\n\n    # Register routers\n    api_router.include_router(health_router)\n\n    # Register API v1 router\n    app.include_router(api_router)\n\n    return app\n</code></pre>"},{"location":"modules/#configuration","title":"Configuration","text":"<p>API configuration module.</p>"},{"location":"modules/#job_search_ai_assistant.api.config.setup_logging","title":"<code>setup_logging()</code>","text":"<p>Configure logging for the API.</p> Source code in <code>src/job_search_ai_assistant/api/config.py</code> <pre><code>def setup_logging() -&gt; None:\n    \"\"\"Configure logging for the API.\"\"\"\n    dictConfig(log_config)\n</code></pre>"},{"location":"modules/#routes","title":"Routes","text":""},{"location":"modules/#health-check","title":"Health Check","text":"<p>Health check endpoints.</p>"},{"location":"modules/#job_search_ai_assistant.api.routes.health.health_check","title":"<code>health_check()</code>  <code>async</code>","text":"<p>Perform a health check of the API.</p> <p>Returns:</p> Name Type Description <code>HealthResponse</code> <code>HealthResponse</code> <p>Health check response containing status and version.</p> Source code in <code>src/job_search_ai_assistant/api/routes/health.py</code> <pre><code>@router.get(\"/\", response_model=HealthResponse)\nasync def health_check() -&gt; HealthResponse:\n    \"\"\"Perform a health check of the API.\n\n    Returns:\n        HealthResponse: Health check response containing status and version.\n    \"\"\"\n    return HealthResponse(\n        status=\"ok\",\n        version=\"0.1.0\",\n    )\n</code></pre>"},{"location":"modules/#schemas","title":"Schemas","text":""},{"location":"modules/#health-schema","title":"Health Schema","text":"<p>Health check response schemas.</p>"},{"location":"modules/#job_search_ai_assistant.api.schemas.health.HealthResponse","title":"<code>HealthResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Health check response model.</p> Source code in <code>src/job_search_ai_assistant/api/schemas/health.py</code> <pre><code>class HealthResponse(BaseModel):\n    \"\"\"Health check response model.\"\"\"\n\n    status: str\n    version: str\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}